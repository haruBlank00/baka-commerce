// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  email    String @unique
  password String

  profile   Profile?
  profileId String?

  address   Address?
  addressId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id String @id @default(uuid())

  firstName String
  lastName  String
  dob       DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id String @id @default(uuid())

  streetAddress String
  city          String
  district      String
  province      String
  country       String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Owner {
  id String @id @default(uuid())

  email     String
  password  String
  firstName String
  lastName  String
  avatar    String

  store Store[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Store {
  id String @id @default(uuid())

  name String

  owner   Owner  @relation(fields: [ownerId], references: [id])
  ownerId String

  category Category[]
  Product  Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id String @id @default(uuid())

  name  String
  image String

  store   Store  @relation(fields: [storeId], references: [id])
  storeId String

  products ProductCategory[]

  removed   Boolean?
  removedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id String @id @default(uuid())

  name        String
  description String

  status ProductStatus

  images String[]

  variants Variant[]

  categories ProductCategory[]

  inventoryStatus InventoryStatus @default(IN_STOCK)

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String?

  removed   Boolean?
  removedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Variant {
  id String @id @default(uuid())

  type   String // color, size
  values VariantValue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model VariantValue {
  id String @id @default(uuid())

  name        String
  description String

  sellingPrice Float
  crossedPrice Float
  costPerItem  Float

  quantity Int
  sku      String

  sellAfterOutOfStock Boolean
  inventoryStatus     InventoryStatus

  images String[]

  variant   Variant @relation(fields: [variantId], references: [id])
  variantId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductCategory {
  id String @id @default(uuid())

  product   Product @relation(fields: [productId], references: [id])
  productId String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProductStatus {
  PUBLISH
  DRAFT
  ARCHIVED
}

enum InventoryStatus {
  IN_STOCK
  OUT_OF_STOCK
  DISCONTINUED
}
