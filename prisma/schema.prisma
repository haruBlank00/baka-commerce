// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  email    String @unique
  password String

  profile   Profile?
  profileId String?

  address   Address?
  addressId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id String @id @default(uuid())

  firstName String
  lastName  String
  dob       DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id String @id @default(uuid())

  streetAddress String
  city          String
  district      String
  province      String
  country       String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Owner {
  id String @id @default(uuid())

  email     String
  password  String
  firstName String
  lastName  String
  avatar    String

  store Store[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Store {
  id String @id @default(uuid())

  name String

  owner   Owner  @relation(fields: [ownerId], references: [id])
  ownerId String

  category Category[]
  Product  Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id String @id @default(uuid())

  name  String
  image String

  store   Store  @relation(fields: [storeId], references: [id])
  storeId String

  product Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id String @id @default(uuid())

  name        String
  description String

  sellingPrice Float
  crossedPrice Float
  costPerItem  Float

  quantity Int
  sku      Int

  sellAfterOutOfStock Boolean
  status              ProductStatus

  images String[]

  // variants = [{variant: "size", values: [{value: "xs", label: "small", price: "5.00"}]}]
  variants Json

  category Category[]

  store   Store  @relation(fields: [storeId], references: [id])
  storeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProductStatus {
  PUBLISH
  DRAFT
  ARCHIVED
}

// id String @id @default(uuid())
// createdAt DateTime @default(now())
// updatedAt DateTime @updatedAt
